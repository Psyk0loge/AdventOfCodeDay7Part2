card_value_dic = {'A' : 13,
                  'K' : 12,
                   'Q' : 11,
                   'T' : 10,
                   '9' : 9,
                   '8' : 8,
                   '7' : 7,
                   '6': 6,
                   '5': 5,
                   '4': 4,
                   '3': 3,
                   '2': 2,
                   'J': 1
                }

hands = [
    [],
    [],
    [],
    [],
    [],
    [],
    []
]

def flatten(x):
    result = []
    for el in x:
        if hasattr(el, "__iter__") and not isinstance(el, str):
            result.extend(flatten(el))
        else:
            result.append(el)
    return result


element_coutner = 0
#order by type
with open('Day7/day7.txt') as f:
    for x in f:
        element_coutner += 1
        line = x.strip()
        test_line = line.split(" ")[0].strip()
        print("test")
        joker_count = test_line.count('J')
        matches = []
        for x in card_value_dic:
            if x != 'J':
                matches.append(test_line.count(x))
        #give value:
        match max(matches)+joker_count:
            case 5:
                print("FiveSome", 7)
                hands[0].append(line)
            case 4:
                print("FourSome", 6)
                hands[1].append(line)
            case 3:
                if matches.__contains__(2):
                    print("Full House", 5)
                    hands[2].append(line)
                else:
                    print("threesome", 4)
                    hands[3].append(line)
            case 2:
                if matches.count(2) == 2:
                    print("two Pair", 3)
                    hands[4].append(line)
                else:
                    print("one pair", 2)
                    hands[5].append(line)
            case 1: 
                print("Distinct", 1)
                hands[6].append(line)

def getCardValue(card: str):
    return [card_value_dic[char] for char in card.split(" ")[0]]

for handtype in hands:
    if len(handtype) == 0:
          continue
    handtype.sort(key= lambda card: getCardValue(card),reverse=True)


sum = 0
for hand_typesX in hands:
    if len(hand_typesX) >0:
        print(len(hand_typesX))
        for hand in range(0, len(hand_typesX)):
            # print(hand_typesX[hand].split(" ")[1])
            print(hand_typesX[hand])
            sum = sum + (int(hand_typesX[hand].split(" ")[1]) * element_coutner)
            element_coutner -= 1

print(sum)
print("Merry Christmas")